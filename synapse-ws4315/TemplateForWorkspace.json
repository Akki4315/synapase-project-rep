{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-ws4315"
		},
		"synapse-ws4315-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-ws4315-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-ws4315.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"ls_serverless_sql_pool_db_nyx_taxi_ldw_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "tcp:synapse-ws4315-ondemand.sql.azuresynapse.net,1433"
		},
		"ls_serverless_sql_pool_db_nyx_taxi_ldw_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "nyc_taxi_ldw"
		},
		"ls_synapsegen2sa_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsegen2sa.dfs.core.windows.net/"
		},
		"synapse-ws4315-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsegen2sa.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_gold_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "get trip year and month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyx_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "use nyc_taxi_ldw;\n\nselect distinct year, month from silver.vw_trip_data_green;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach year and month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get trip year and month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get trip year and month').output.resultSets[0].rows",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Delete partition",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "gold/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "create partition",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete partition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[gold].[sp_silver_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month\r\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyx_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "create gold view",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach year and month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyx_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "USE nyc_taxi_ldw;"
								},
								{
									"type": "NonQuery",
									"text": "DROP VIEW IF EXISTS gold.vw_trip_data_green;"
								},
								{
									"type": "Query",
									"text": "CREATE VIEW gold.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET') \n    WITH (\n        borough VARCHAR(15),\n        trip_date DATE,\n        trip_day VARCHAR(10),\n        trip_day_weekend_ind CHAR(1),\n        card_trip_count INT,\n        cash_trip_count INT\n        )\n    AS [result];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyx_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "get trip year and month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyx_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "use nyc_taxi_ldw;\n\nselect distinct year, month from bronze.vw_trip_data_green;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach year and month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get trip year and month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get trip year and month').output.resultSets[0].rows",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Delete partition",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "silver/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "create partition",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete partition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[sp_silver_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month\r\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyx_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "create silver view",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach year and month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyx_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "USE nyc_taxi_ldw;"
								},
								{
									"type": "NonQuery",
									"text": "DROP VIEW IF EXISTS silver.vw_trip_data_green;"
								},
								{
									"type": "Query",
									"text": "CREATE VIEW silver.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET') \n    WITH (\n        vendor_id INT 3,\n        lpep_pickup_datetime DATETIME2(7),\n        lpep_dropoff_datetime DATETIME2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT 7,\n        pu_location_id INT 8,\n        do_location_id INT 9,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee VARCHAR(10),\n        improvement_surcharge FLOAT, \n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT)\n    AS [result];"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyx_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach Silver Folder Path",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('v_usp_folder_path')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "delete silver folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_data_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folder_path": {
													"value": "@item().folder_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "create silver table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "delete silver folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().usp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_db_nyx_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_usp_folder_path": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver/taxi_zone",
								"usp_name": "silver.usp_silver_taxi_zone"
							},
							{
								"folder_path": "silver/calendar",
								"usp_name": "silver.usp_silver_calendar"
							},
							{
								"folder_path": "silver/rate_code",
								"usp_name": "silver.usp_silver_rate_code"
							},
							{
								"folder_path": "silver/payment_type",
								"usp_name": "silver.usp_silver_payment_type"
							},
							{
								"folder_path": "silver/trip_type",
								"usp_name": "silver.usp_silver_trip_type"
							},
							{
								"folder_path": "silver/vendor",
								"usp_name": "silver.usp_silver_vendor"
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_data_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyx_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "delete silver taxi zone folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create  silver taxi zone",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "delete silver taxi zone folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyx_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF OBJECT_ID('silver.taxi_zone') is NOT NULL\nDROP EXTERNAL TABLE silver.taxi_zone"
								},
								{
									"type": "Query",
									"text": "CREATE EXTERNAL TABLE silver.taxi_zone\nWITH(\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/taxi_zone',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nselect * \nFROM bronze.taxi_zone"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyx_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone_usp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "delete silver taxi zone folder",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "create_silver_taxi_zone_table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "delete silver taxi zone folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[silver].[usp_silver_taxi_zone]"
						},
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_db_nyx_taxi_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "demo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_db_nyx_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_execute_all_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "execute create silver tables",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "execute create silver trip data green",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "execute create gold data green",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "execute create silver tables",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "execute create silver trip data green",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_gold_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_tables')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_data_green')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_gold_data_green')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_nyc_taxi_data_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsegen2sa",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_folder_path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().p_folder_path",
							"type": "Expression"
						},
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsegen2sa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapsegen2sa",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "demo"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/taxi_zone",
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapsegen2sa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_serverless_sql_pool_db_nyx_taxi_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"server": "[parameters('ls_serverless_sql_pool_db_nyx_taxi_ldw_properties_typeProperties_server')]",
					"database": "[parameters('ls_serverless_sql_pool_db_nyx_taxi_ldw_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SystemAssignedManagedIdentity"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_synapsegen2sa')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_synapsegen2sa_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-ws4315-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-ws4315-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-ws4315-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-ws4315-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_check_for_duplicates')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n--check for duplicates\n\nSELECT\n    location_id, count(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE ='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    with (\n        location_id SMALLINT 1,\n        borough VARCHAR(15) 2,\n        zone VARCHAR(50) 3,\n        service_zone VARCHAR(15) 4\n    )AS [result]\nGROUP BY location_id\nHAVING count(1) > 1;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/10_create_silver_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n--create trip_data_green_view\nDROP VIEW IF EXISTS silver.vw_trip_data_green\nGO\n\nCREATE VIEW silver.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'silver/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET') \n    WITH (\n        vendor_id INT 3,\n        lpep_pickup_datetime DATETIME2(7),\n        lpep_dropoff_datetime DATETIME2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT 7,\n        pu_location_id INT 8,\n        do_location_id INT 9,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee VARCHAR(10),\n        improvement_surcharge FLOAT, \n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT)\n    AS [result]\nGO\n\nselect TOP 100 * from silver.vw_trip_data_green\nwhere year = '2020' and month = '08'\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n/*\nCampaigns Requirements\nLet's start with select statement required to satisfy the requirement\n*/\n\n/*\nSELECT\n    td.year,\n    td.month,\n    tz.borough,\n    convert(date, lpep_pickup_datetime) as trip_date,\n    cal.day_name as trip_day,\n    CASE WHEN cal.day_name IN('Saturday', 'Sunday') THEN 'Y' ELSE 'N' END as trip_day_weekend_ind,\n    SUM(CASE WHEN pt.description = 'Credit card' THEN 1 ELSE 0 END) AS card_trip_count,\n    SUM(CASE WHEN pt.description = 'Cash' THEN 1 ELSE 0 END) AS cash_trip_count\n  FROM\n    silver.vw_trip_data_green td\n  JOIN silver.taxi_zone tz ON(td.pu_location_id = tz.location_id)\n  JOIN silver.calendar cal ON(cal.date = convert(date, lpep_pickup_datetime))\n  JOIN silver.payment_type pt ON(td.payment_type = pt.payment_type)\nWHERE td.year = '2020' and td.month = '01'\nGROUP BY td.year,\n    td.month,\n    tz.borough,\n    convert(date, lpep_pickup_datetime),\n    cal.day_name;\n*/\n\nEXEC gold.sp_gold_trip_data_green '2020', '01'\nEXEC gold.sp_gold_trip_data_green '2020', '02'\nEXEC gold.sp_gold_trip_data_green '2020', '03'\nEXEC gold.sp_gold_trip_data_green '2020', '04'\nEXEC gold.sp_gold_trip_data_green '2020', '05'\nEXEC gold.sp_gold_trip_data_green '2020', '06'\nEXEC gold.sp_gold_trip_data_green '2020', '07'\nEXEC gold.sp_gold_trip_data_green '2020', '08'\nEXEC gold.sp_gold_trip_data_green '2020', '09'\nEXEC gold.sp_gold_trip_data_green '2020', '10'\nEXEC gold.sp_gold_trip_data_green '2020', '11'\nEXEC gold.sp_gold_trip_data_green '2020', '12'\nEXEC gold.sp_gold_trip_data_green '2021', '01'\nEXEC gold.sp_gold_trip_data_green '2021', '02'\nEXEC gold.sp_gold_trip_data_green '2021', '03'\nEXEC gold.sp_gold_trip_data_green '2021', '04'\nEXEC gold.sp_gold_trip_data_green '2021', '05'\nEXEC gold.sp_gold_trip_data_green '2021', '06'\nEXEC gold.sp_gold_trip_data_green '2021', '07'\n\nselect top 2 * from silver.trip_data_green;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_data_quality_check')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n--Identify the data quality issues in trip total amount\nSELECT\n    min(total_amount) as min_total_amt,\n    max(total_amount) as max_total_amt,\n    avg(total_amount) as avg_total_amt,\n    count(1) as total_no_of_records,\n    count(total_amount) as not_null_total_no_of_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS trip_data;         --found negative amount in total_amount column\n\n--check for the negative amount\nSELECT\n    * \nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS trip_data\nwhere total_amount < 0;     --negative amount payment type found 3-No charge and 4-Dispute\n\n--check for the count of each payment_type \nSELECT\n    payment_type, count(1) as no_of_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS trip_data\n--where total_amount < 0\nGROUP BY payment_type\nORDER BY payment_type;     --payment type Null found. that we could replace with 5-unknown during further analysis.(depend on the requirement)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_create_gold_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n--create trip_data_green_view\nDROP VIEW IF EXISTS gold.vw_trip_data_green\nGO\n\nCREATE VIEW gold.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'gold/trip_data_green/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'PARQUET') \n    WITH (\n        borough VARCHAR(15),\n        trip_date DATE,\n        trip_day VARCHAR(10),\n        trip_day_weekend_ind CHAR(1),\n        card_trip_count INT,\n        cash_trip_count INT\n        )\n    AS [result]\nGO\n\nselect TOP 100 * from gold.vw_trip_data_green\nwhere year = '2020' and month = '03'\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/12_join_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n--identify the no of trip made from each borough\n\n--check wether location id contains any null value or not\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    )AS trip_data\nwhere PULocationID is null;\n\n--check wether location id contains any null value or not\nSELECT *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsegen2sa.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS taxi_zone\nwhere locationID is null;\n\n--joining to dataset using openrowset function \n\nSELECT Borough, count(1) as no_of_trips\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    )AS trip_data\nJOIN\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsegen2sa.dfs.core.windows.net/raw/taxi_zone.csv'\n,\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS taxi_zone\nON trip_data.PULocationID = taxi_zone.LocationID\nGROUP BY Borough\norder BY no_of_trips;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/13_simple_transformation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n--number of trips made by duration in hour\nSELECT \n    DATEDIFF(MINUTE, lpep_pickup_datetime, lpep_dropoff_datetime)/60 as from_time,\n    (DATEDIFF(MINUTE, lpep_pickup_datetime, lpep_dropoff_datetime)/60) + 1 as to_time,\n    count(1) as number_of_trip\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/**',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nwhere DATEDIFF(MINUTE, lpep_pickup_datetime, lpep_dropoff_datetime)/60 >= 0\nGROUP BY DATEDIFF(MINUTE, lpep_pickup_datetime, lpep_dropoff_datetime)/60, (DATEDIFF(MINUTE, lpep_pickup_datetime, lpep_dropoff_datetime)/60)+1\nORDER BY from_time, to_time;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/14_discovery_assignment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n--find the total trips, cards_trips & cash trips boroughwise. \n\nWITH trip_data AS\n(SELECT\n    * \nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2021/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) as [result]\n),\ntaxi_zone AS\n(SELECT *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsegen2sa.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n        )as [result]\n),\nv_payment_type AS\n(SELECT CAST(JSON_VALUE(jsonDoc, '$.payment_type') AS SMALLINT) payment_type,\n        CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc') AS VARCHAR(15)) payment_type_desc\n  FROM OPENROWSET(\n    BULK  'payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'csv',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '\\t', \n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0a'\n  ) WITH (\n    jsonDoc NVARCHAR(max)\n    )as [result]\n)\nSELECT \n    taxi_zone.Borough, count(1) as total_trips,\n    sum(case when v_payment_type.payment_type_desc = 'Cash' then 1 else 0 end) as cash_trips,\n    sum(case when v_payment_type.payment_type_desc = 'Credit card' then 1 else 0 end) as card_trips,\n    CAST((sum(case when v_payment_type.payment_type_desc = 'Cash' then 1 else 0 end)/cast(count(1) as decimal))*100 as decimal(5,2)) as cash_trip_percent,\n    (100-CAST((sum(case when v_payment_type.payment_type_desc = 'Cash' then 1 else 0 end)/cast(count(1) as decimal))*100 as decimal(5,2))) as card_trip_percent\nFROM trip_data\nLEFT JOIN v_payment_type ON (trip_data.payment_type = v_payment_type.payment_type)\nLEFT JOIN taxi_zone ON (trip_data.PULocationID = taxi_zone.LocationID)\nwhere v_payment_type.payment_type_desc IN ('Cash', 'Credit card')\nGROUP BY taxi_zone.Borough\nORDER BY taxi_zone.Borough;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create_databases')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE master\nGO                                  --we can use GO instead of ; to make statement end\n\nCREATE DATABASE nyc_taxi_ldw        --ldw(logical data warehouse)\nGO\n\nUSE nyc_taxi_ldw\nGO\n\nCREATE SCHEMA bronze;\nCREATE SCHEMA silver;\nCREATE SCHEMA gold;\n\nALTER DATABASE nyc_taxi_ldw COLLATE Latin1_General_100_CI_AI_SC_UTF8;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_explore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- 1.fetching the csv file data\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsegen2sa.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        --'abfsss://nyc-taxi-data@synapsegen2sa.dfs.core.windows.net/raw/taxi_zone.csv'\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = ',', --these are bydefault charactor considered but for learning pupose we mentioned\n        ROWTERMINATOR = '\\n' --these are bydefault charactor considered but for learning pupose we mentioned\n    ) AS [result]\n\n--2.Examine the datatype of the column. \n--(we called builtin store procedure and provide select query as a string. \n--as query has passed in single quote hence we need to provide double single quote inside the string)\n\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''https://synapsegen2sa.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE,\n        FIELDTERMINATOR = '','',\n        ROWTERMINATOR = ''\\n''\n    ) AS [result]'\n\n--3.find the maximum length of each column (which require to set the datatype limit)\nSELECT\n    max(len(LocationID)) as len_locationid,\n    max(len(Borough)) as len_Borough,\n    max(len(Zone)) as len_Zone,\n    max(len(service_zone)) as len_service_zone\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsegen2sa.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n--4.provide the schema manually \nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsegen2sa.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    with (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    )AS [result]\n\n--5.verify the schema applied is same as we provided or not.\n\nEXEC sp_describe_first_result_set N'SELECT\n    *\nFROM\n    OPENROWSET(\n        BULK ''abfss://nyc-taxi-data@synapsegen2sa.dfs.core.windows.net/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        HEADER_ROW = TRUE\n    ) \n    with (\n        LocationID SMALLINT,\n        Borough VARCHAR(15),\n        Zone VARCHAR(50),\n        service_zone VARCHAR(15)\n    )AS [result]'\n\n--check the collation.\nselect name, collation_name from sys.databases;\n\n--specify the UTF-8 collation to varchar columns\n\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsegen2sa.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) \n    with (\n        LocationID SMALLINT,\n        Borough VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n        Zone VARCHAR(50) COLLATE Latin1_General_100_CI_AI_SC_UTF8,\n        service_zone VARCHAR(15) COLLATE Latin1_General_100_CI_AI_SC_UTF8\n    )AS [result]\n\n--specify the UTF-8 collation to varchar columns\n\nCREATE DATABASE nyc_taxi_discovery;\n\nALTER DATABASE nyc_taxi_discovery COLLATE Latin1_General_100_CI_AI_SC_UTF8;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_usp_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_stored_procedure(USP)"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n--create stored procedure to store the data in partition in silver schema\nCREATE OR ALTER PROCEDURE silver.sp_silver_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX);\n        \n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE silver.trip_data_green_'+ @year +'_'+ @month +'\n            WITH(\n                DATA_SOURCE = nyc_taxi_src,\n                LOCATION = ''silver/trip_data_green/year='+ @year +'/month='+ @month +''',\n                FILE_FORMAT = parquet_file_format\n                )\n            AS\n        SELECT * FROM bronze.vw_trip_data_green\n        WHERE year = '''+ @year +''' \n        and month = '''+ @month +'''';\n    \n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n        'DROP EXTERNAL TABLE silver.trip_data_green_'+ @year +'_'+ @month;\n    \n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_create_ext_data_sources')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources where name = 'nyc_taxi_src')\n    CREATE EXTERNAL DATA SOURCE nyc_taxi_src\n    WITH\n    (   LOCATION = 'https://synapsegen2sa.dfs.core.windows.net/nyc-taxi-data' --location path = go storage account->container-> click ...->properties->copy URL \n    );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_explore_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "--select database\nuse nyc_taxi_discovery;\n\n--read the csv file\nSELECT * \n  FROM OPENROWSET(\n    BULK  'calendar.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'csv',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n  ) as cal;\n\n-- check the schema \nEXEC sp_describe_first_result_set N'SELECT * \n  FROM OPENROWSET(\n    BULK  ''calendar.csv'',\n    DATA_SOURCE = ''nyc_taxi_data_raw'',\n    FORMAT = ''csv'',\n    PARSER_VERSION = ''2.0'',\n    HEADER_ROW = TRUE\n  ) as cal'\n\n--apply the schema manually\nSELECT * \n  FROM OPENROWSET(\n    BULK  'calendar.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'csv',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n  ) WITH(\n    date_key INT,\n    date DATE,\n    year SMALLINT,\n    month TINYINT,\n    day TINYINT,\n    day_name VARCHAR(10),\n    day_of_year SMALLINT,\n    week_of_month TINYINT,\n    week_of_year TINYINT,\n    month_name VARCHAR(10),\n    year_month INT,\n    year_week INT\n  ) as cal;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_usp_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_stored_procedure(USP)"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n--create stored procedure to store the data in partition in silver schema\nCREATE OR ALTER PROCEDURE gold.sp_gold_trip_data_green\n@year VARCHAR(4),\n@month VARCHAR(2)\nAS\nBEGIN\n\n    DECLARE @create_sql_stmt NVARCHAR(MAX),\n            @drop_sql_stmt NVARCHAR(MAX);\n        \n    SET @create_sql_stmt = \n        'CREATE EXTERNAL TABLE gold.trip_data_green_'+ @year +'_'+ @month +'\n            WITH(\n                DATA_SOURCE = nyc_taxi_src,\n                LOCATION = ''gold/trip_data_green/year='+ @year +'/month='+ @month +''',\n                FILE_FORMAT = parquet_file_format\n                )\n            AS\n        SELECT\n            td.year,\n            td.month,\n            tz.borough,\n            convert(date, lpep_pickup_datetime) as trip_date,\n            cal.day_name as trip_day,\n            CASE WHEN cal.day_name IN(''Saturday'', ''Sunday'') THEN ''Y'' ELSE ''N'' END as trip_day_weekend_ind,\n            SUM(CASE WHEN pt.description = ''Credit card'' THEN 1 ELSE 0 END) AS card_trip_count,\n            SUM(CASE WHEN pt.description = ''Cash'' THEN 1 ELSE 0 END) AS cash_trip_count\n        FROM\n            silver.vw_trip_data_green td\n            JOIN silver.taxi_zone tz ON(td.pu_location_id = tz.location_id)\n            JOIN silver.calendar cal ON(cal.date = convert(date, lpep_pickup_datetime))\n            JOIN silver.payment_type pt ON(td.payment_type = pt.payment_type)\n        WHERE td.year = '''+ @year +''' \n        and td.month = '''+ @month +'''\n        GROUP BY td.year,\n                td.month,\n                tz.borough,\n                convert(date, lpep_pickup_datetime),\n                cal.day_name';\n\n    PRINT(@create_sql_stmt)\n\n    EXEC sp_executesql @create_sql_stmt;\n\n    SET @drop_sql_stmt = \n        'DROP EXTERNAL TABLE gold.trip_data_green_'+ @year +'_'+ @month;\n    \n    PRINT(@drop_sql_stmt)\n\n    EXEC sp_executesql @drop_sql_stmt;\n\nEND;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_create_file_formats')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n-- Create an external file format for DELIMITED (CSV) files for parser_version 2.0.\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'csv_file_format') \n    CREATE EXTERNAL FILE FORMAT csv_file_format \n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT, \n        FORMAT_OPTIONS (\n        FIELD_TERMINATOR = ',', \n        STRING_DELIMITER = '\"',\n        FIRST_ROW = 2, \n        USE_TYPE_DEFAULT = FALSE,\n        ENCODING = 'UTF8',\n        PARSER_VERSION = '2.0')\n        );\n\n-- Create an external file format for DELIMITED (CSV) files for parser_version 1.0.\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'csv_file_format_pv1') \n    CREATE EXTERNAL FILE FORMAT csv_file_format_pv1 \n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT, \n        FORMAT_OPTIONS (\n        FIELD_TERMINATOR = ',', \n        STRING_DELIMITER = '\"',\n        FIRST_ROW = 2, \n        USE_TYPE_DEFAULT = FALSE,\n        ENCODING = 'UTF8',\n        PARSER_VERSION = '1.0')\n        );\n\n-- Create an external file format for DELIMITED (TSV) files for parser_version 2.0.\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'tsv_file_format') \n    CREATE EXTERNAL FILE FORMAT tsv_file_format\n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT, \n        FORMAT_OPTIONS (\n        FIELD_TERMINATOR = '\\t', \n        STRING_DELIMITER = '\"',\n        FIRST_ROW = 2, \n        USE_TYPE_DEFAULT = FALSE,\n        ENCODING = 'UTF8',\n        PARSER_VERSION = '2.0')\n        );\n\n-- Create an external file format for DELIMITED (TSV) files for parser_version 1.0.\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'tsv_file_format_pv1') \n    CREATE EXTERNAL FILE FORMAT tsv_file_format_pv1\n    WITH (\n        FORMAT_TYPE = DELIMITEDTEXT, \n        FORMAT_OPTIONS (\n        FIELD_TERMINATOR = '\\t', \n        STRING_DELIMITER = '\"',\n        FIRST_ROW = 2, \n        USE_TYPE_DEFAULT = FALSE,\n        ENCODING = 'UTF8',\n        PARSER_VERSION = '1.0')\n        );\n\n--Create an external file format for PARQUET files.\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'parquet_file_format') \n    CREATE EXTERNAL FILE FORMAT parquet_file_format\n    WITH (\n        FORMAT_TYPE = PARQUET,\n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n        );\n    \n--Create an external file format for delta files.\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'delta_file_format') \n    CREATE EXTERNAL FILE FORMAT delta_file_format\n    WITH (\n        FORMAT_TYPE = DELTA,\n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n        );\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_explore_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "--select database\nuse nyc_taxi_discovery;\n\n--read the csv file which contain escaped char (\\)\nSELECT * \n  FROM OPENROWSET(\n    BULK  'vendor_escaped.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'csv',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    ESCAPECHAR = '\\\\'   --need to mentioned escaped charactor for string identification (\\) itself as escaped char hence need to provide (\\\\)\n  ) as vendor;\n\n--read the csv file which contain double quote charactor\nSELECT * \n  FROM OPENROWSET(\n    BULK  'vendor.csv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'csv',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE\n    --FIELDQUOTE = '\"' --bydefault fieldquote is \"\" hence no need to mentioned in select query.\n  ) as vendor;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_usp_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_stored_procedure(USP)"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_taxi_zone\nAS\nBEGIN\n    IF OBJECT_ID('silver.usp_silver_taxi_zone') is NOT NULL\n    DROP EXTERNAL TABLE silver.taxi_zone;\n\n    CREATE EXTERNAL TABLE silver.taxi_zone\n    WITH(\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/taxi_zone',\n        FILE_FORMAT = parquet_file_format)\n    AS\n    select * \n    FROM bronze.taxi_zone;\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create_external_bronze_table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n--create taxi_zone_csv external table \nIF OBJECT_ID ('bronze.taxi_zone') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.taxi_zone;\n\n    CREATE EXTERNAL TABLE bronze.taxi_zone\n        (\n        location_id SMALLINT,\n        borough VARCHAR(15),\n        zone VARCHAR(50),\n        service_zone VARCHAR(15))\n        WITH (\n            LOCATION = 'raw/taxi_zone.csv',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = csv_file_format_pv1, \n            REJECT_VALUE = 10,\n            REJECTED_ROW_LOCATION = 'rejections/taxi_zone'\n        );\n\nSELECT * FROM bronze.taxi_zone;\n\n--create calendar_csv external table \nIF OBJECT_ID ('bronze.calendar') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.calendar;\n\n    CREATE EXTERNAL TABLE bronze.calendar\n        (\n            date_key INT,\n            date DATE,\n            year SMALLINT,\n            month TINYINT,\n            day TINYINT,\n            day_name VARCHAR(10),\n            day_of_year SMALLINT,\n            week_of_month TINYINT,\n            week_of_year TINYINT,\n            month_name VARCHAR(10),\n            year_month INT,\n            year_week INT)\n        WITH (\n            LOCATION = 'raw/calendar.csv',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = csv_file_format_pv1, \n            REJECT_VALUE = 10,\n            REJECTED_ROW_LOCATION = 'rejections/calendar'\n        );\n\nSELECT * FROM bronze.calendar;\n\n--create vendor_csv external table \nIF OBJECT_ID ('bronze.vendor') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.vendor;\n\n    CREATE EXTERNAL TABLE bronze.vendor\n        (\n        vendor_id TINYINT,\n        vendor_name VARCHAR(50))\n        WITH (\n            LOCATION = 'raw/vendor.csv',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = csv_file_format_pv1, \n            REJECT_VALUE = 10,\n            REJECTED_ROW_LOCATION = 'rejections/vendor'\n        );\n\nSELECT * FROM bronze.vendor;\n\n--create trip_type_tsv external table \nIF OBJECT_ID ('bronze.trip_type') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_type;\n\n    CREATE EXTERNAL TABLE bronze.trip_type\n        (\n        trip_type TINYINT,\n        trip_type_desc VARCHAR(20))\n        WITH (\n            LOCATION = 'raw/trip_type.tsv',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = tsv_file_format_pv1, \n            REJECT_VALUE = 10,\n            REJECTED_ROW_LOCATION = 'rejections/trip_type'\n        );\n\nSELECT * FROM bronze.trip_type;\n\n--create trip_data_green_csv external table \nIF OBJECT_ID ('bronze.trip_data_green') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green;\n\n    CREATE EXTERNAL TABLE bronze.trip_data_green\n        (\n        vendor_id INT,\n        lpep_pickup_datetime DATETIME2(7),\n        lpep_dropoff_datetime DATETIME2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT,\n        pu_location_id INT,\n        do_location_id INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT, \n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT)\n        WITH (\n            LOCATION = 'raw/trip_data_green_csv/**',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = csv_file_format\n            );\n\nSELECT TOP 100 * FROM bronze.trip_data_green;\n\n--create trip_data_green_csv external table \nIF OBJECT_ID ('bronze.trip_data_green') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green;\n\n    CREATE EXTERNAL TABLE bronze.trip_data_green\n        (\n        vendor_id INT,\n        lpep_pickup_datetime DATETIME2(7),\n        lpep_dropoff_datetime DATETIME2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT,\n        pu_location_id INT,\n        do_location_id INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT, \n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT)\n        WITH (\n            LOCATION = 'raw/trip_data_green_csv/**',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = csv_file_format\n            );\n\nSELECT TOP 100 * FROM bronze.trip_data_green;\n\n--create trip_data_green_csv external table \nIF OBJECT_ID ('bronze.trip_data_green') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green;\n\n    CREATE EXTERNAL TABLE bronze.trip_data_green\n        (\n        vendor_id INT,\n        lpep_pickup_datetime DATETIME2(7),\n        lpep_dropoff_datetime DATETIME2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT,\n        pu_location_id INT,\n        do_location_id INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT, \n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT)\n        WITH (\n            LOCATION = 'raw/trip_data_green_csv/**',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = csv_file_format\n            );\n\nSELECT TOP 100 * FROM bronze.trip_data_green;\n\n\n--create trip_data_green_csv external table \nIF OBJECT_ID ('bronze.trip_data_green') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green;\n\n    CREATE EXTERNAL TABLE bronze.trip_data_green\n        (\n        vendor_id INT,\n        lpep_pickup_datetime DATETIME2(7),\n        lpep_dropoff_datetime DATETIME2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT,\n        pu_location_id INT,\n        do_location_id INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT, \n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT)\n        WITH (\n            LOCATION = 'raw/trip_data_green_csv/**',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = csv_file_format\n            );\n\nSELECT TOP 100 * FROM bronze.trip_data_green;\n\n\n--create trip_data_green_parquet external table \nIF OBJECT_ID ('bronze.trip_data_green_parquet') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_parquet;\n\n    CREATE EXTERNAL TABLE bronze.trip_data_green_parquet\n        (\n        VendorID INT,\n        lpep_pickup_datetime DATETIME2(7),\n        lpep_dropoff_datetime DATETIME2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT, \n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT)\n        WITH (\n            LOCATION = 'raw/trip_data_green_parquet/**',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = parquet_file_format\n            );\n\nSELECT TOP 100 * FROM bronze.trip_data_green_parquet;\n\n--create trip_data_green_delta external table \nIF OBJECT_ID ('bronze.trip_data_green_delta') IS NOT NULL\n    DROP EXTERNAL TABLE bronze.trip_data_green_delta;\n\n    CREATE EXTERNAL TABLE bronze.trip_data_green_delta\n        (\n        VendorID INT,\n        lpep_pickup_datetime DATETIME2(7),\n        lpep_dropoff_datetime DATETIME2(7),\n        store_and_fwd_flag CHAR(1),\n        RatecodeID INT,\n        PULocationID INT,\n        DOLocationID INT,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT, \n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT)\n        WITH (\n            LOCATION = 'raw/trip_data_green_delta/',\n            DATA_SOURCE = nyc_taxi_src,\n            FILE_FORMAT = delta_file_format\n            );\n\nSELECT TOP 100 * FROM bronze.trip_data_green_delta;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_explore_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "--select database\nuse nyc_taxi_discovery;\n\n--read the csv file\nSELECT * \n  FROM OPENROWSET(\n    BULK  'trip_type.tsv',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'csv',\n    PARSER_VERSION = '2.0',\n    HEADER_ROW = TRUE,\n    FIELDTERMINATOR = '\\t'\n  ) as trip_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_usp_create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_stored_procedure(USP)"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_calendar\nAS\nBEGIN\n    IF OBJECT_ID('silver.calendar') is NOT NULL\n    DROP EXTERNAL TABLE silver.calendar;\n\n    CREATE EXTERNAL TABLE silver.calendar\n        WITH(\n            DATA_SOURCE = nyc_taxi_src,\n            LOCATION = 'silver/calendar',\n            FILE_FORMAT = parquet_file_format)\n    AS\n    select * \n    FROM bronze.calendar;;\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_create_bronze_view')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\n--drop the view if already exsist\nDROP VIEW IF EXISTS bronze.vw_rate_code\nGO\n\n--create a view on rate_code.json file\nCREATE VIEW bronze.vw_rate_code\nAS\nSELECT rate_code_id, rate_code\n  FROM OPENROWSET(\n    BULK  'raw/rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'csv',\n    FIELDTERMINATOR = '0x0b', \n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b'\n  )WITH (\n    jsonDoc NVARCHAR(max)\n  )as rate_code\n  CROSS APPLY openjson(jsonDoc)\n  WITH(\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20))\nGO \n\nselect * FROM bronze.vw_rate_code\nGO\n\n--drop the view if already exsist\nDROP VIEW IF EXISTS bronze.vw_payment_type\nGO\n\n--create a view on rate_code.json file\nCREATE VIEW bronze.vw_payment_type\nAS\nSELECT payment_type, description\n  FROM OPENROWSET(\n    BULK  'raw/payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'csv',\n    FIELDTERMINATOR = '0x0b', \n    FIELDQUOTE = '0x0b'\n  )WITH (\n    jsonDoc NVARCHAR(max)\n  )as payment_type\n  CROSS APPLY openjson(jsonDoc)\n  WITH(\n    payment_type SMALLINT,\n    description VARCHAR(15) '$.payment_type_desc')\nGO \n\nselect * FROM bronze.vw_payment_type\nGO\n\n--drop the view if already exsist\nDROP VIEW IF EXISTS bronze.vw_trip_data_green\nGO\n\n--create view on trip_data_green_csv\nCREATE VIEW bronze.vw_trip_data_green\nAS\nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'raw/trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_src',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nGO\n\nSELECT * FROM bronze.vw_trip_data_green\nWHERE year = '2020' and month = '05'\nGO\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_explore_payment_type_json')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "--select database\nuse nyc_taxi_discovery;\n\n--approch 1: read the json file \nSELECT CAST(JSON_VALUE(jsonDoc, '$.payment_type') AS SMALLINT) payment_type,\n        CAST(JSON_VALUE(jsonDoc, '$.payment_type_desc') AS VARCHAR(15)) payment_type_desc\n  FROM OPENROWSET(\n    BULK  'payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'csv',\n    PARSER_VERSION = '1.0',\n    FIELDTERMINATOR = '\\t', \n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0a'\n  ) WITH (\n    jsonDoc NVARCHAR(max)\n  )as payment_type;\n\nEXEC sp_describe_first_result_set N'SELECT CAST(JSON_VALUE(jsonDoc, ''$.payment_type'') AS SMALLINT) payment_type,\n        CAST(JSON_VALUE(jsonDoc, ''$.payment_type_desc'') AS VARCHAR(15)) payment_type_desc\n  FROM OPENROWSET(\n    BULK  ''payment_type.json'',\n    DATA_SOURCE = ''nyc_taxi_data_raw'',\n    FORMAT = ''csv'',\n    PARSER_VERSION = ''1.0'',\n    FIELDTERMINATOR = ''\\t'', \n    FIELDQUOTE = ''0x0b'',\n    ROWTERMINATOR = ''0x0a''\n  ) WITH (\n    jsonDoc NVARCHAR(max)\n  )as payment_type'\n\n--approch 2: read the json file (using openjson function)\nSELECT payment_type, description\n  FROM OPENROWSET(\n    BULK  'payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'csv',\n    FIELDTERMINATOR = '0x0b', \n    FIELDQUOTE = '0x0b'\n  )WITH (\n    jsonDoc NVARCHAR(max)\n  )as payment_type\n  CROSS APPLY openjson(jsonDoc)\n  WITH(\n    payment_type SMALLINT,\n    description VARCHAR(15) '$.payment_type_desc'\n  );\n\n--read the nested json with openjson function\n\nSELECT payment_type, payment_type_desc_value\n  FROM OPENROWSET(\n    BULK  'payment_type_array.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'csv',\n    FIELDTERMINATOR = '0x0b', \n    FIELDQUOTE = '0x0b'\n  )WITH (\n    jsonDoc NVARCHAR(max)\n  )as payment_type\n  CROSS APPLY openjson(jsonDoc)\n  WITH(\n    payment_type SMALLINT,\n    payment_type_desc NVARCHAR(max) as json)\n  CROSS APPLY openjson(payment_type_desc)\n  WITH(\n    sub_type SMALLINT,\n    payment_type_desc_value VARCHAR(15) '$.value'\n  );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_usp_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_stored_procedure(USP)"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_vendor\nAS\nBEGIN\n    IF OBJECT_ID('silver.vendor') is NOT NULL\n    DROP EXTERNAL TABLE silver.vendor;\n\n    CREATE EXTERNAL TABLE silver.vendor\n    WITH(\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/vendor',\n        FILE_FORMAT = parquet_file_format)\n    AS\n    select * \n    FROM bronze.vendor;\n\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_create_external_silver_table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n--create external taxi_zone table using CETAS statement\nIF OBJECT_ID('silver.taxi_zone') is NOT NULL\nDROP EXTERNAL TABLE silver.taxi_zone;\n\nCREATE EXTERNAL TABLE silver.taxi_zone\nWITH(\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/taxi_zone',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nselect * \nFROM bronze.taxi_zone;\n\nselect * from silver.taxi_zone;\n\n--create external calendar table using CETAS statement\nIF OBJECT_ID('silver.calendar') is NOT NULL\nDROP EXTERNAL TABLE silver.calendar;\n\nCREATE EXTERNAL TABLE silver.calendar\nWITH(\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/calendar',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nselect * \nFROM bronze.calendar;\n\nselect * from silver.calendar;\n\n--create external vendor table using CETAS statement\nIF OBJECT_ID('silver.vendor') is NOT NULL\nDROP EXTERNAL TABLE silver.vendor;\n\nCREATE EXTERNAL TABLE silver.vendor\nWITH(\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/vendor',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nselect * \nFROM bronze.vendor;\n\nselect * from silver.vendor;\n\n--create external trip_type table using CETAS statement\nIF OBJECT_ID('silver.trip_type') is NOT NULL\nDROP EXTERNAL TABLE silver.trip_type;\n\nCREATE EXTERNAL TABLE silver.trip_type\nWITH(\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/trip_type',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nselect * \nFROM bronze.trip_type;\n\nselect * from silver.trip_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_explore_rate_code_json')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\n--process the array_type json\nSELECT rate_code_id, rate_code\n  FROM OPENROWSET(\n    BULK  'rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'csv',\n    FIELDTERMINATOR = '0x0b', \n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b'\n  )WITH (\n    jsonDoc NVARCHAR(max)\n  )as rate_code\n  CROSS APPLY openjson(jsonDoc)\n  WITH(\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n  );\n\n--process the array_type multiline json (there is no change in code stanadard json and multiline json both are same)\nSELECT rate_code_id, rate_code\n  FROM OPENROWSET(\n    BULK  'rate_code_multi_line.json',\n    DATA_SOURCE = 'nyc_taxi_data_raw',\n    FORMAT = 'csv',\n    FIELDTERMINATOR = '0x0b', \n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b'\n  )WITH (\n    jsonDoc NVARCHAR(max)\n  )as rate_code\n  CROSS APPLY openjson(jsonDoc)\n  WITH(\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20)\n  );",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_usp_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_stored_procedure(USP)"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_trip_type\nAS\nBEGIN\n    IF OBJECT_ID('silver.trip_type') is NOT NULL\n    DROP EXTERNAL TABLE silver.trip_type;\n\n    CREATE EXTERNAL TABLE silver.trip_type\n    WITH(\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/trip_type',\n        FILE_FORMAT = parquet_file_format)\n    AS\n    select * \n    FROM bronze.trip_type;\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n--create external rate_code table using CETAS statement\nIF OBJECT_ID('silver.rate_code') is NOT NULL\nDROP EXTERNAL TABLE silver.rate_code;\n\nCREATE EXTERNAL TABLE silver.rate_code\nWITH(\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/rate_code',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT rate_code_id, rate_code\n  FROM OPENROWSET(\n    BULK  'raw/rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'csv',\n    FIELDTERMINATOR = '0x0b', \n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b'\n  )WITH (\n    jsonDoc NVARCHAR(max)\n    )as rate_code\n  CROSS APPLY openjson(jsonDoc)\n  WITH(\n    rate_code_id TINYINT,\n    rate_code VARCHAR(20));\n\nselect * from silver.rate_code;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_explore_trip_data_green_csv')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/green_tripdata_2020-01.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n--select data from folder\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/month=01/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n--select data from subfolder\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=2020/**',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n--select the specific month data\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ('trip_data_green_csv/year=2020/month=01/*.csv', 'trip_data_green_csv/year=2020/month=03/*.csv'),\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n--select the data from all folders and subfolders (use more than 1 wild charactor)\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\n\n--File metadata function Filename() : to verify which records comes from which file\nSELECT\n    TOP 100 \n    result.filename() as file_name,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result];\n\n--get the each file record count \nSELECT\n    result.filename() as file_name,\n    count(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nGROUP BY result.filename()\nORDER BY result.filename();\n\n--limit the data using filename\nSELECT\n    result.filename() as file_name,\n    count(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nwhere result.filename() IN ('green_tripdata_2020-01.csv', 'green_tripdata_2021-01.csv')\nGROUP BY result.filename()\nORDER BY result.filename();\n\n--use filepath function\nSELECT\n    result.filename() as file_name,\n    result.filepath() as file_path,\n    count(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nwhere result.filename() IN ('green_tripdata_2020-01.csv', 'green_tripdata_2021-01.csv')\nGROUP BY result.filename(), result.filepath()\nORDER BY result.filename(), result.filepath();\n\n--get the year & month file count by using filepath function\nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    count(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nGROUP BY result.filepath(1), result.filepath(2)\nORDER BY result.filepath(1), result.filepath(2);\n\n--use filepath function in where clause\nSELECT\n    result.filepath(1) as year,\n    result.filepath(2) as month,\n    count(1) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/month=*/*.csv',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\n        HEADER_ROW = TRUE\n    ) AS [result]\nwhere result.filepath(1) = '2020'\nAND result.filepath(2) IN ('06','08')\nGROUP BY result.filepath(1), result.filepath(2)\nORDER BY result.filepath(1), result.filepath(2);\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_usp_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_stored_procedure(USP)"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_rate_code\nAS\nBEGIN\n    IF OBJECT_ID('silver.rate_code') is NOT NULL\n    DROP EXTERNAL TABLE silver.rate_code;\n\n    CREATE EXTERNAL TABLE silver.rate_code\n    WITH(\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/rate_code',\n        FILE_FORMAT = parquet_file_format)\n    AS\n    SELECT rate_code_id, rate_code\n    FROM OPENROWSET(\n    BULK  'raw/rate_code.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'csv',\n    FIELDTERMINATOR = '0x0b', \n    FIELDQUOTE = '0x0b',\n    ROWTERMINATOR = '0x0b')\n    WITH (\n        jsonDoc NVARCHAR(max)\n        )as rate_code\n    CROSS APPLY openjson(jsonDoc)\n    WITH(\n        rate_code_id TINYINT,\n        rate_code VARCHAR(20));\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n\n--create external payment_type table using CETAS statement\nIF OBJECT_ID('silver.payment_type') is NOT NULL\nDROP EXTERNAL TABLE silver.payment_type;\n\nCREATE EXTERNAL TABLE silver.payment_type\nWITH(\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/payment_type',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nSELECT payment_type, description\n  FROM OPENROWSET(\n    BULK  'raw/payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'csv',\n    FIELDTERMINATOR = '0x0b', \n    FIELDQUOTE = '0x0b'\n  )WITH (\n    jsonDoc NVARCHAR(max)\n  )as payment_type\n  CROSS APPLY openjson(jsonDoc)\n  WITH(\n    payment_type SMALLINT,\n    description VARCHAR(15) '$.payment_type_desc');\n\nselect * from silver.payment_type;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_explore_trip_data_green_parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "use nyc_taxi_discovery;\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n\n--indentify the interred datatypes\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''trip_data_green_parquet/year=2020/month=01/'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        FORMAT = ''PARQUET''\n    ) AS [result]'\n\n--define the schema manually\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) WITH (\n        vendor_id INT 1,\n        lpep_pickup_datetime DATETIME2(7),\n        lpep_dropoff_datetime DATETIME2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT 5,\n        pu_location_id INT 6,\n        do_location_id INT 7,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT, \n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT\n    )AS [result]\n\n--select only required cloumn(to improve the query performance we should select only required columns which reduce the entire scanning)\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) WITH (\n        passenger_count INT,\n        fare_amount FLOAT, \n        total_amount FLOAT\n    )AS [result]\n\n--query from all folders & subfolders using wildcard charactor\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    )AS [result]\n\n--get filename\nSELECT\n    TOP 100\n    result.filename() as file_name,\n    result.*\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    )AS [result]\n\n--query from subfolders\nSELECT\n    result.filepath() as file_path,\n    result.filename() as file_name, \n    count(1) as result_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    )AS [result]\nGROUP BY result.filepath(), result.filename()\nORDER BY result.filepath(), result.filename();\n\n--use filepath to target partition\nSELECT\n    result.filepath() as file_path,\n    result.filename() as file_name, \n    count(1) as result_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    )AS [result]\nwhere result.filepath(1) = '2021' and \nresult.filepath(2) in ('01', '03', '05')\nGROUP BY result.filepath(), result.filename()\nORDER BY result.filepath(), result.filename();\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_usp_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw/user_stored_procedure(USP)"
				},
				"content": {
					"query": "USE nyc_taxi_ldw\nGO\n\nCREATE OR ALTER PROCEDURE silver.usp_silver_payment_type\nAS\nBEGIN\n    IF OBJECT_ID('silver.payment_type') is NOT NULL\n    DROP EXTERNAL TABLE silver.payment_type;\n\n    CREATE EXTERNAL TABLE silver.payment_type\n    WITH(\n        DATA_SOURCE = nyc_taxi_src,\n        LOCATION = 'silver/payment_type',\n        FILE_FORMAT = parquet_file_format)\n    AS\n    SELECT payment_type, description\n    FROM OPENROWSET(\n    BULK  'raw/payment_type.json',\n    DATA_SOURCE = 'nyc_taxi_src',\n    FORMAT = 'csv',\n    FIELDTERMINATOR = '0x0b', \n    FIELDQUOTE = '0x0b')\n    WITH (\n        jsonDoc NVARCHAR(max)\n        )as payment_type\n    CROSS APPLY openjson(jsonDoc)\n    WITH(\n        payment_type SMALLINT,\n        description VARCHAR(15) '$.payment_type_desc');\nEND;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/ldw"
				},
				"content": {
					"query": "USE nyc_taxi_ldw;\n/*\n--create external trip_data_green table using CETAS statement\nIF OBJECT_ID('silver.trip_data_green') is NOT NULL\nDROP EXTERNAL TABLE silver.trip_data_green;\n\nCREATE EXTERNAL TABLE silver.trip_data_green\nWITH(\n    DATA_SOURCE = nyc_taxi_src,\n    LOCATION = 'silver/trip_data_green',\n    FILE_FORMAT = parquet_file_format\n)\nAS\nselect * \nFROM bronze.trip_data_green;\n\nselect * from silver.trip_data_green;\n*/\n\n--by calling stored procedure we can store the data in partition in parquet format\nEXEC silver.sp_silver_trip_data_green '2020', '01'\nEXEC silver.sp_silver_trip_data_green '2020', '02'\nEXEC silver.sp_silver_trip_data_green '2020', '03'\nEXEC silver.sp_silver_trip_data_green '2020', '04'\nEXEC silver.sp_silver_trip_data_green '2020', '05'\nEXEC silver.sp_silver_trip_data_green '2020', '06'\nEXEC silver.sp_silver_trip_data_green '2020', '07'\nEXEC silver.sp_silver_trip_data_green '2020', '08'\nEXEC silver.sp_silver_trip_data_green '2020', '09'\nEXEC silver.sp_silver_trip_data_green '2020', '10'\nEXEC silver.sp_silver_trip_data_green '2020', '11'\nEXEC silver.sp_silver_trip_data_green '2020', '12'\nEXEC silver.sp_silver_trip_data_green '2021', '01'\nEXEC silver.sp_silver_trip_data_green '2021', '02'\nEXEC silver.sp_silver_trip_data_green '2021', '03'\nEXEC silver.sp_silver_trip_data_green '2021', '04'\nEXEC silver.sp_silver_trip_data_green '2021', '05'\nEXEC silver.sp_silver_trip_data_green '2021', '06'\nEXEC silver.sp_silver_trip_data_green '2021', '07'\n\nselect top 2 * from silver.trip_data_green;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_explore_trip_data_green_delta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "USE nyc_taxi_discovery;\n\n--query the delta log data\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS [result]\n\n\n/* Notes: \n1. in delta format file we query only on main folder which contain delta log folder. we can't query on partioning folder as we queried in parquet or csv format.\n2. when we query on delta file it will create partition folder column additionally which we can use in where clause to filterout the data. \n3. we can't query on old version data in synapse.\n*/\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/year=2020/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS [result]           -- it will throw error because we can't query on partioning folder data as delta log folder is not present inside the partitioning folder.\n\n--identify the interred datatypes\nEXEC sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''trip_data_green_delta/'',\n        DATA_SOURCE = ''nyc_taxi_data_raw'',\n        FORMAT = ''DELTA''\n    ) AS [result]'          \n\n-- we can define the schema manually which we did previously.\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) WITH(\n        vendor_id INT 1,\n        lpep_pickup_datetime DATETIME2(7),\n        lpep_dropoff_datetime DATETIME2(7),\n        store_and_fwd_flag CHAR(1),\n        rate_code_id INT 5,\n        pu_location_id INT 6,\n        do_location_id INT 7,\n        passenger_count INT,\n        trip_distance FLOAT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        ehail_fee INT,\n        improvement_surcharge FLOAT, \n        total_amount FLOAT,\n        payment_type INT,\n        trip_type INT,\n        congestion_surcharge FLOAT,\n        year VARCHAR(4),\n        month VARCHAR(2)\n    )AS [result]\n\n-- Note: partitioning data columns must be present while quering limited number of columns. if partioning data column won't provide then it will throw an error. \nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) WITH(\n        tip_amount FLOAT,\n        trip_type INT,\n        year VARCHAR(4),\n        month VARCHAR(2)\n    )AS [result]\n\n--fetching the data based on partitioning\nSELECT COUNT(distinct payment_type)\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS [result]       -- whole data is being scanned (4 mb)\n\nSELECT COUNT(distinct payment_type)\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS [result]\nwhere year = '2020' and month = '01'; -- only where clause mentioned data scan(< 1 mb) ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_discovery",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/set_serverless_cost_control')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "utils"
				},
				"content": {
					"query": "--to check usage of serverless sql pull till date\nselect * from sys.dm_external_data_processed;\n\n--to check the current settings of limits\nselect * from sys.configurations\nwhere name like 'Data Processed %';\n\n--to set the sql serverless pull limit  \n--option 1- go to manage click cost control icon next to built-in and set the limits \n--option 2- by using stored procedure we can set the limit as follows\n\nsp_set_data_processed_limit\n    @type = N'monthly',\n    @limit_tb = 2;\n\nsp_set_data_processed_limit\n    @type = N'weekly',\n    @limit_tb = 1;\n\nsp_set_data_processed_limit\n    @type = N'daily',\n    @limit_tb = 1;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}